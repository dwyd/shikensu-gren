module Main exposing ( main )

import Bytes exposing ( Bytes )
import Bytes.Decode
import Bytes.Encode
import Shikensu
import Shikensu.Contrib as Shikensu
import Shikensu.Definition as Shikensu
import Shikensu.Focus as Shikensu exposing ( Focus(..) )
import Shikensu.Path as Path
import Task


main : Shikensu.Program
main =
    [ ".."
    , "example"
    , "content"
    ]
        |> Path.directory
        |> Relative
        |> Shikensu.program sequence


sequence : Shikensu.Task -> Shikensu.Task
sequence =
    Task.map (Shikensu.withExtension "md")
        >> Task.andThen Shikensu.read
        >> Task.map
                (\bundle ->
                    bundle
                        |> Shikensu.permalink "index"
                        |> Shikensu.renameExtension "md" "html"
                        |> Shikensu.renderContent renderMarkdown
                )
        >> Task.andThen (Shikensu.write buildDir)


buildDir : Shikensu.Focus
buildDir =
    [ ".."
    , "example"
    , "build"
    ]
        |> Path.directory
        |> Relative


renderMarkdown : Shikensu.Definition -> Maybe Bytes
renderMarkdown def =
    def.content
        |> Maybe.andThen
                (\content ->
                    content
                        |> Bytes.width
                        |> Bytes.Decode.string
                        |> (\decoder -> Bytes.Decode.decode decoder content)
                )
        |> Maybe.map
                (\_ ->
                    """
                    <h1>Markdown Header</h1>
                    <p>Content</p>
                    """
                )
        |> Maybe.map (Bytes.Encode.string >> Bytes.Encode.encode)
