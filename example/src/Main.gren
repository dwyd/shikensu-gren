module Main exposing ( main )

{-|-}

import Bytes exposing ( Bytes )
import FileSystem.Path as Path exposing ( Path )
import Markdown
import Shikensu
import Shikensu.Contrib as Shikensu
import Shikensu.Definition as Shikensu
import Task
import Transmutable.Html


main : Shikensu.Program
main =
    -- 🚀
    Shikensu.program sequence source


{-| Which directory are we working with? -}
source : Path
source =
    Path.fromPosixString "./content"


{-| Optional, the destination of the output we'll be producing.
-}
destination : Path
destination =
    Path.fromPosixString "./build"


{-| A sequence of operations.

This is just an example of what you can do. Shikensu basically revolves
around `Definition`s, every file found in the tree is made into a `Definition`.
These contain various parts of the path, the content, metadata, etc.
You can manipulate that until you are happy with the resulting tree,
and then write it to disk.

1. List all markdown files
2. Read the contents of said files
3. Rename extension from `md` to `html`
4. Permalink the paths (eg. `post.html` becomes `post/index.html`)
5. Render the markdown
6. Write the output to the destination directory

-}
sequence : Shikensu.Task -> Shikensu.Task
sequence =
    identity
        >> Task.map (Shikensu.withExtension "md")
        >> Task.andThen Shikensu.read
        >> Task.map
                (\bundle ->
                    bundle
                        |> Shikensu.renameExtension "md" "html"
                        |> Shikensu.permalink "index"
                        |> Shikensu.renderContent renderMarkdown
                )
        >> Task.andThen (Shikensu.write destination)
        -- --------
        -- Optional
        -- --------
        -- Debug output: destination path + bundle
        >> Task.map
                (\bundle ->
                    destination
                        |> Path.toPosixString
                        |> String.prepend "🛳️  Bundle successfully written to "
                        |> Debug.log
                        |> (\debug -> debug bundle)
                )



-- RENDERERS


renderMarkdown : Shikensu.Definition -> Maybe Bytes
renderMarkdown def =
    def.content
        |> Maybe.andThen Bytes.toString
        |> Maybe.map
                (\markdown ->
                    markdown
                        |> Markdown.parse
                                { frontmatter = Nothing
                                }
                        |> .blocks
                        |> Array.map Markdown.toHtml
                        |> Transmutable.Html.arrayToString
                )
        |> Maybe.map Bytes.fromString
