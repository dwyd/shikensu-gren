module Shikensu exposing (..)

import Bytes.Encode
import FileSystem
import Shikensu.Definition as Definition exposing ( Compendium, Definition )
import Shikensu.Focus as Focus exposing ( Focus(..) )
import Shikensu.Path as Path exposing ( Path, Kind(..), Directory, File )
import Task exposing ( Task )



-- ðŸ§©


type Error
    = PlatformAccessError FileSystem.AccessError
    | PlatformUnknownError FileSystem.UnknownFileSystemError



-- ðŸš€


list : FileSystem.Permission -> Focus -> Task Error Compendium
list permission focus =
    recursiveList focus permission (Path.directory [])


recursiveList : Focus -> FileSystem.Permission -> Path Directory -> Task Error Compendium
recursiveList focus permission relativePath =
    relativePath
        |> Path.combine (Focus.toPath focus)
        |> Path.toPosix
                { absolute = False
                }
        |> FileSystem.listDirectoryContent permission
        |> Task.mapError PlatformAccessError
        |> Task.andThen
                (\listing ->
                    listing
                        |> Array.filter
                                (\name ->
                                    -- TODO: Add option to also list hidden files
                                    if String.startsWith "." name then
                                        False
                                    else
                                        True
                                )
                        |> Array.map
                                (\name ->
                                    name
                                        |> Array.singleton
                                        |> Path.directory
                                        |> Path.combine relativePath
                                        |> recursiveList focus permission
                                )
                        |> Task.sequence
                )
        |> Task.map Array.flatten
        |> Task.onError
                (\err ->
                    -- Because we can't determine easily what is a directory and what is a file,
                    -- we assume everything is a directory and recover from an access error
                    -- when it we discover it is a file.
                    case err of
                        PlatformAccessError (FileSystem.AccessErrorUnknown errMessage) ->
                            if String.contains "ENOTDIR:" errMessage then
                                relativePath
                                    |> Path.unwrap
                                    |> Path.file
                                    |> Definition.create focus
                                    |> Array.singleton
                                    |> Task.succeed
                            else
                                Task.fail err

                        PlatformAccessError _ ->
                            Task.fail err

                        PlatformUnknownError (FileSystem.UnknownFileSystemError message) ->
                            Task.fail err
                )



-- IO


read : FileSystem.Permission -> Compendium -> Task Error Compendium
read permission dict =
    dict
        |> Array.map
                (\def ->
                    -- TODO: Prefer the absolute path once we have that.
                    def
                        |> Definition.relativePath
                        |> Path.combine (Focus.toPath def.focus)
                        |> Path.toPosix
                                { absolute = False
                                }
                        |> FileSystem.openForRead permission
                        |> Task.mapError PlatformAccessError
                        |> Task.andThen
                                (\handle ->
                                    handle
                                        |> FileSystem.read
                                        |> Task.mapError PlatformUnknownError
                                        |> Task.map (\bytes -> { def | content = Just bytes })
                                        |> Task.andThen
                                                (\updatedDef ->
                                                    handle
                                                        |> FileSystem.close
                                                        |> Task.map (\_ -> updatedDef)
                                                        |> Task.mapError PlatformUnknownError
                                                )
                                )
                )
        |> Task.sequence


write : FileSystem.Permission -> Focus -> Compendium -> Task Error {}
write permission focus dict =
    dict
        |> Array.map (writeDef permission focus)
        |> Task.sequence
        |> Task.map (\_ -> {})


writeDef : FileSystem.Permission -> Focus -> Definition -> Task Error {}
writeDef permission focus def =
    -- TODO: Prefer the absolute path once we have that.
    let
        path =
            def
                |> Definition.relativePath
                |> Path.combine (Focus.toPath focus)
    in
    path
        |> Path.toPosix
                { absolute = False
                }
        |> FileSystem.openForWrite permission FileSystem.EnsureEmpty
        |> Task.mapError PlatformAccessError
        |> Task.andThen
                (\handle ->
                    def.content
                        |> Maybe.withDefault
                                (Bytes.Encode.encode
                                    <| Bytes.Encode.string ""
                                )
                        |> FileSystem.write handle
                        |> Task.mapError PlatformUnknownError
                )
        |> Task.map (\_ -> {})
        |> Task.onError
                (\err ->
                    case err of
                        PlatformAccessError FileSystem.AccessErrorNotFound ->
                            -- Make sure directory tree exists
                            let
                                directoryPath =
                                    path
                                        |> Path.map (Array.dropLast 1)
                                        |> Path.toPosix
                                                { absolute = False
                                                }
                            in
                            { recursive = True
                            }
                                |> FileSystem.makeDirectory permission directoryPath
                                |> Task.mapError PlatformAccessError
                                |> Task.andThen (\_ -> writeDef permission focus def)

                        _ ->
                            Task.fail err
                )
