module Shikensu exposing ( Error(..), Program, Task, list, program, read, write, print, errorToString )

{-|


# 🚀

@docs program, Program, list, Task, Error


# IO

@docs read, write


# Misc

@docs print, errorToString



-}

import Bytes.Encode
import FileSystem
import Node.Program as Node
import Shikensu.Bundle as Bundle exposing ( Bundle )
import Shikensu.Definition as Definition exposing ( Compendium, Definition )
import Shikensu.Focus as Focus exposing ( Focus(..) )
import Shikensu.Path as Path exposing ( Path, Kind(..), Encapsulated, Directory, File )
import Task



-- 🧩


{-|-}
type Error
    = PlatformAccessError (Path Encapsulated) FileSystem.AccessError
    | PlatformUnknownError FileSystem.UnknownFileSystemError


{-|-}
type alias Program =
    Node.Program {} {}


{-| Simple alias for working with tasks dealing with bundles.
-}
type alias Task =
    Task.Task Error Bundle



-- 🚀


{-| Create a Shikensu Program.

This is basically a wrapper around `list` that creates a Program
for you and initialises the needed permissions.

-}
program : (Task -> Task) -> Focus -> Program
program taskFn focus =
    Node.define
        { init =
            Node.await
                FileSystem.initialize
                (\fsPermission ->
                    Node.startProgram
                        { model = {}
                        , command =
                            focus
                                |> list fsPermission
                                |> taskFn
                                |> Task.attempt (\_ -> {})
                        }
                )
        , update =
            \_ model ->
                { model = model
                , command = Cmd.none
                }
        , subscriptions = \_ -> Sub.none
        }


{-| Recursively list a directory.
-}
list : FileSystem.Permission -> Focus -> Task
list fsPermission focus =
    []
        |> Path.directory
        |> recursiveList focus fsPermission
        |> Task.map
                (\compendium ->
                    { fsPermission = fsPermission
                    , compendium = compendium
                    }
                )



-- IO


{-| Read the files in the given compendium/bundle (ie. set the content property in the definition)
-}
read : Bundle -> Task
read bundle =
    bundle.compendium
        |> Array.map
                (\def ->
                    -- TODO: Prefer the absolute path once we have that.
                    let
                        path =
                            def
                                |> Definition.relativePath
                                |> Path.combine (Focus.toPath def.focus)
                    in
                    path
                        |> Path.toPosix
                                { absolute = False
                                }
                        |> FileSystem.openForRead bundle.fsPermission
                        |> Task.mapError (PlatformAccessError (Path.encapsulate path))
                        |> Task.andThen
                                (\handle ->
                                    handle
                                        |> FileSystem.read
                                        |> Task.mapError PlatformUnknownError
                                        |> Task.map (\bytes -> { def | content = Just bytes })
                                        |> Task.andThen
                                                (\updatedDef ->
                                                    handle
                                                        |> FileSystem.close
                                                        |> Task.map (\_ -> updatedDef)
                                                        |> Task.mapError PlatformUnknownError
                                                )
                                )
                )
        |> Task.sequence
        |> Task.map (\compendium -> { bundle | compendium = compendium })


{-| Write each definition to their respective location.
-}
write : Focus -> Bundle -> Task
write focus bundle =
    bundle.compendium
        |> Array.map (writeDef bundle.fsPermission focus)
        |> Task.sequence
        |> Task.map (\_ -> bundle)


writeDef : FileSystem.Permission -> Focus -> Definition -> Task.Task Error {}
writeDef permission focus def =
    -- TODO: Prefer the absolute path once we have that.
    let
        path =
            def
                |> Definition.relativePath
                |> Path.combine (Focus.toPath focus)
    in
    path
        |> Path.toPosix
                { absolute = False
                }
        |> FileSystem.openForWrite permission FileSystem.EnsureEmpty
        |> Task.mapError (PlatformAccessError (Path.encapsulate path))
        |> Task.andThen
                (\handle ->
                    def.content
                        |> Maybe.withDefault
                                (Bytes.Encode.encode
                                    <| Bytes.Encode.string ""
                                )
                        |> FileSystem.write handle
                        |> Task.mapError PlatformUnknownError
                )
        |> Task.map (\_ -> {})
        |> Task.onError
                (\err ->
                    case err of
                        PlatformAccessError _ FileSystem.AccessErrorNotFound ->
                            -- Make sure directory tree exists
                            let
                                directoryPath =
                                    Path.map (Array.dropLast 1) path

                                directoryPathString =
                                    Path.toPosix
                                        { absolute = False
                                        }
                                        directoryPath
                            in
                            { recursive = True
                            }
                                |> FileSystem.makeDirectory permission directoryPathString
                                |> Task.mapError (PlatformAccessError (Path.encapsulate directoryPath))
                                |> Task.andThen (\_ -> writeDef permission focus def)

                        _ ->
                            Task.fail err
                )



-- TERMINAL


{-|-}
print : Task -> Task
print task =
    -- TODO
    task



-- ERRORS


{-|-}
errorToString : Error -> String
errorToString error =
    case error of
        PlatformAccessError path FileSystem.AccessErrorNotFound ->
            "Access error, couldn\'t find path \'"
                ++ Path.toPosix
                        { absolute = False
                        }
                        path
                ++ "\'"

        PlatformAccessError path FileSystem.AccessErrorNoAccess ->
            "Access error, couldn\'t access path \'"
                ++ Path.toPosix
                        { absolute = False
                        }
                        path
                ++ "\'"

        PlatformAccessError path (FileSystem.AccessErrorUnknown accessError) ->
            "Access error, \'"
                ++ accessError
                ++ "\' with path \'"
                ++ Path.toPosix
                        { absolute = False
                        }
                        path
                ++ "\'"

        PlatformAccessError path FileSystem.AccessErrorNotADirectory ->
            "Access error, expected a directory at the path \'"
                ++ Path.toPosix
                        { absolute = False
                        }
                        path
                ++ "\'"

        PlatformUnknownError (FileSystem.UnknownFileSystemError string) ->
            "Unknown file system error: " ++ string



-- ㊙️


recursiveList : Focus -> FileSystem.Permission -> Path Directory -> Task.Task Error Compendium
recursiveList focus permission relativePath =
    let
        path =
            Path.combine (Focus.toPath focus) relativePath
    in
    path
        |> Path.toPosix
                { absolute = False
                }
        |> FileSystem.listDirectory permission
        |> Task.mapError (PlatformAccessError (Path.encapsulate path))
        |> Task.andThen
                (\listing ->
                    listing
                        |> Array.filterMap
                                (\entry ->
                                    -- TODO: Add option to also list hidden files
                                    case entry of
                                        FileSystem.File name ->
                                            if String.startsWith "." name then
                                                Nothing
                                            else
                                                name
                                                    |> Array.singleton
                                                    |> Path.file
                                                    |> Path.combine relativePath
                                                    |> Definition.create focus
                                                    |> Array.singleton
                                                    |> Task.succeed
                                                    |> Just

                                        FileSystem.Directory name ->
                                            name
                                                |> Array.singleton
                                                |> Path.directory
                                                |> Path.combine relativePath
                                                |> recursiveList focus permission
                                                |> Just

                                        _ ->
                                            Nothing
                                )
                        |> Task.sequence
                        |> Task.map Array.flatten
                )
