module Shikensu exposing ( Program, Task, list, perform, program, programs, read, write, writeDefinition )

{-|

# 🚀

@docs program, programs, Program, list, perform, Task


# IO

@docs read, write, writeDefinition

-}

import Bytes.Encode
import FileSystem
import Init
import Node
import Shikensu.Bundle as Bundle exposing ( Bundle )
import Shikensu.Definition as Definition exposing ( Definition )
import Shikensu.Error as Error exposing ( Error(..) )
import Shikensu.Focus as Focus exposing ( Focus(..) )
import Shikensu.Path as Path exposing ( Path, Kind(..), Encapsulated, Directory, File )
import Stream
import Task



-- 🧩


{-| Alias for a Node program.
-}
type alias Program =
    Node.Program {} {}


{-| Alias for the main `Task` type we'll be working with here.
-}
type alias Task =
    Task.Task Error Bundle



-- 🚀


{-| Create a Shikensu Program.

This is basically a wrapper around `list` and `perform`
that creates a SimpleProgram for you and initialises the needed permissions.

It also prints errors to stderr or a success message to stdout.

    import Shikensu
    import Shikensu.Contrib as Shikensu
    import Shikensu.Focus exposing (Focus(..))
    import Task

    Shikensu.program sequence CurrentDirectory

    sequence task =
        task
            |> Task.map (Shikensu.withExtension "md")
            |> Task.andThen Shikensu.read
            |> Task.map (Shikensu.renderContent markdownRenderer) -- See `example` folder
            |> Task.andThen (Shikensu.write destinationFocus)


-}
program : (Task -> Task) -> Focus -> Program
program sequence focus =
    programs
        [ { focus = focus
          , sequence = sequence
          }
        ]


{-| Provides a way to make and operate on multiple lists.

Technically not multiple programs, but same idea as
the `program` function, just with multiple lists.

    import Shikensu
    import Shikensu.Focus exposing (Focus(..))

    Shikensu.programs
        [ { focus = Relative (Path.directory [ "posts" ])
          , sequence = Task.andThen Shikensu.read
          }
        , { focus = Relative (Path.directory [ "images" ])
          , sequence = Task.map (\bundle -> ...)
          }
        ]

-}
programs :
    Array
        { focus : Focus
        , sequence : Task -> Task
        }
    -> Program
programs collection =
    perform
        { onSuccess = \env _ -> Stream.sendLine env.stdout "🧪 Sequence completed"
        , onError = \env err -> Stream.sendLine env.stderr ("🚨 " ++ Error.toString err)
        }
        (\fsPermission ->
            collection
                |> Array.map
                        (\{ focus, sequence } ->
                            focus
                                |> list fsPermission
                                |> sequence
                        )
                |> Task.sequence
        )


{-| The `list` function itself, unwrapped.

Recursively lists a directory and then gives you a `Task`
containing a `Bundle` which in turns has an array of `Definition`s
stored under the property named `compendium`.

This collection of `Definition`s is the main thing you'll be working with.
The goal of this library is to scan a file tree, manipulate it and then
optionally write it back to disk. This is done through these definitions.

    import Shikensu
    import Shikensu.Focus exposing (Focus(..))

    Shikensu.perform
        -- To ignore, return `Cmd.none`
        { onSuccess = \env _ -> Stream.sendLine env.stdout "🧪 Sequence completed"
        , onError = \env err -> Stream.sendLine env.stderr ("🚨 " ++ Error.toString err)
        }
        (\fsPermission ->
            CurrentDirectory
                |> Shikensu.list fsPermission
                |> Task.map (Shikensu.withExtension "md")
        )

⚠️ The given `Focus` will always be in the context of
the environment of the resulting Gren binary that is being executed.
So for example, say your `pwd` command returns `~/code/shikensu/`,
and your focus is `Relative (Path.Directory [ "..", "example" ])`.
If you run `./binary/app` the resulting path will be `~/code/example/`.

-}
list : FileSystem.Permission -> Focus -> Task
list fsPermission focus =
    fsPermission
        |> Path.currentWorkingDirectory
        |> Task.mapError neverError
        |> Task.andThen
                (\cwd ->
                    let
                        focusDirectory =
                            Focus.toAbsolutePath
                                { cwd = cwd
                                }
                                focus
                    in
                    []
                        |> Path.directory
                        |> recursiveList fsPermission focusDirectory
                        |> Task.map
                                (\compendium ->
                                    { compendium = compendium
                                    , focusDirectory = focusDirectory
                                    , fsPermission = fsPermission
                                    , workingDirectory = cwd
                                    }
                                )
                )


{-| A utility function that helps you create programs.

This uses `Node.defineSimpleProgram` and `FileSystem.initialize` underneath
and then manages the `Shikensu.Task` value created by `list` or some other function.

See the `list` function above for an example.

-}
perform :
    { onSuccess : Node.Environment -> a -> Cmd {}
    , onError : Node.Environment -> Error -> Cmd {}
    }
    -> (FileSystem.Permission -> Task.Task Error a)
    -> Program
perform errorHandling taskCreator =
    Node.defineSimpleProgram
        (\env ->
            Init.await
                FileSystem.initialize
                (\fsPermission ->
                    fsPermission
                        |> taskCreator
                        |> Task.andThen (errorHandling.onSuccess env >> Task.succeed)
                        |> Task.onError (errorHandling.onError env >> Task.succeed)
                        |> (\t -> Init.awaitTask t Node.endWithCmd)
                )
        )



-- IO


{-| Read the files in the given compendium/bundle,
setting the `content` property in the definition.
-}
read : Bundle -> Task
read bundle =
    bundle.compendium
        |> Array.map
                (\def ->
                    def
                        |> Definition.relativePath
                        |> Path.combine bundle.focusDirectory
                        |> (\path ->
                                path
                                    |> Path.toPosix
                                            { absolute = True
                                            }
                                    |> FileSystem.openForRead bundle.fsPermission
                                    |> Task.mapError (PlatformAccessError (Path.encapsulate path))
                            )
                        |> Task.andThen
                                (\handle ->
                                    handle
                                        |> FileSystem.read
                                        |> Task.mapError PlatformUnknownError
                                        |> Task.map (\bytes -> { def | content = Just bytes })
                                        |> Task.andThen
                                                (\updatedDef ->
                                                    handle
                                                        |> FileSystem.close
                                                        |> Task.map (\_ -> updatedDef)
                                                        |> Task.mapError PlatformUnknownError
                                                )
                                )
                )
        |> Task.sequence
        |> Task.map (\compendium -> { bundle | compendium = compendium })


{-| Write each definition to their respective location.
The location will depend on the focus and the environment it was run in.
-}
write : Focus -> Bundle -> Task
write destinationFocus bundle =
    destinationFocus
        |> Focus.toAbsolutePath
                { cwd = bundle.workingDirectory
                }
        |> (\destinationDirectory ->
                bundle.compendium
                    |> Array.map (writeDefinition bundle.fsPermission destinationDirectory)
                    |> Task.sequence
                    |> Task.map (\_ -> bundle)
            )


{-| ⚠️ You most likely want to use `write` instead. This function is used internally by `write` but is exposed for special use cases.

Write a definition to its respective location.
The location will depend on the given directory path and the environment it was run in.
The given directory path must be an absolute path!

-}
writeDefinition : FileSystem.Permission -> Path Directory -> Definition -> Task.Task Error {}
writeDefinition permission destinationDirectory def =
    def
        |> Definition.relativePath
        |> Path.combine destinationDirectory
        |> (\path ->
                path
                    |> Path.toPosix
                            { absolute = True
                            }
                    |> FileSystem.openForWrite permission FileSystem.EnsureEmpty
                    |> Task.mapError (PlatformAccessError (Path.encapsulate path))
            )
        |> Task.andThen
                (\handle ->
                    def.content
                        |> Maybe.withDefault
                                (Bytes.Encode.encode
                                    <| Bytes.Encode.string ""
                                )
                        |> FileSystem.write handle
                        |> Task.mapError PlatformUnknownError
                )
        |> Task.map (\_ -> {})
        |> Task.onError
                (\err ->
                    case err of
                        PlatformAccessError path FileSystem.AccessErrorNotFound ->
                            -- Make sure directory tree exists
                            let
                                directoryPath =
                                    path
                                        |> Path.unwrap
                                        |> Array.dropLast 1
                                        |> Path.directory

                                directoryPathString =
                                    Path.toPosix
                                        { absolute = True
                                        }
                                        directoryPath
                            in
                            { recursive = True
                            }
                                |> FileSystem.makeDirectory permission directoryPathString
                                |> Task.mapError (PlatformAccessError (Path.encapsulate directoryPath))
                                |> Task.andThen (\_ -> writeDefinition permission destinationDirectory def)

                        _ ->
                            Task.fail err
                )



-- ㊙️


neverError : Never -> Error
neverError _ =
    ErrorMessage "Never ever have I 🤫"


recursiveList : FileSystem.Permission -> Path Directory -> Path Directory -> Task.Task Error (Array Definition)
recursiveList permission focusDirectory relativePath =
    relativePath
        |> Path.combine focusDirectory
        |> (\path ->
                path
                    |> Path.toPosix
                            { absolute = True
                            }
                    |> FileSystem.listDirectory permission
                    |> Task.mapError (PlatformAccessError (Path.encapsulate path))
            )
        |> Task.andThen
                (\listing ->
                    listing
                        |> Array.filterMap
                                (\entry ->
                                    -- TODO: Add option to also list hidden files
                                    case entry of
                                        FileSystem.File name ->
                                            if String.startsWith "." name then
                                                Nothing
                                            else
                                                name
                                                    |> Array.singleton
                                                    |> Path.file
                                                    |> Path.combine relativePath
                                                    |> Definition.create
                                                    |> Array.singleton
                                                    |> Task.succeed
                                                    |> Just

                                        FileSystem.Directory name ->
                                            name
                                                |> Array.singleton
                                                |> Path.directory
                                                |> Path.combine relativePath
                                                |> recursiveList permission focusDirectory
                                                |> Just

                                        _ ->
                                            Nothing
                                )
                        |> Task.sequence
                        |> Task.map Array.flatten
                )
