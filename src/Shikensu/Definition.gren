module Shikensu.Definition exposing ( Compendium, Definition, create, fork, relativePath )

{-|

@docs Definition, Compendium, create, fork, relativePath

-}

import Bytes exposing ( Bytes )
import Dict exposing ( Dict )
import Json.Encode as Json
import Shikensu.Focus as Focus exposing ( Focus )
import Shikensu.Path as Path exposing ( Path, Kind(..), Directory, File )



-- 🧩


{-| A piece of content.

Example definition, given:
* The working directory root path `/Users/icidasset/Projects/shikensu/example/` (the focus)
* The full item path `/Users/icidasset/Projects/shikensu/example/test/hello.md`

    { baseName = "hello"
    , content = Nothing
    , directoryPath = Path.directory [ "test" ]
    , extensionName = Just "md"
    , focus = CurrentDirectory -- Could also be "relative" or "absolute"
    , metadata = Dict.empty
    }

-}
type alias Definition =
    { baseName : String
    , content : Maybe Bytes
    , directoryPath : Path Directory
    , extensionName : Maybe String
    , focus : Focus
    , metadata : Dict String Json.Value
    }


{-| A collection of `Definition`s.
-}
type alias Compendium =
    Array Definition



-- PATHS


{-| The path relative to the working directory.
-}
relativePath : Definition -> Path File
relativePath def =
    [ def.baseName ++ Maybe.withDefault "" (Maybe.map (\e -> "." ++ e) def.extensionName)
    ]
        |> Path.file
        |> Path.combine def.directoryPath



-- 🛠


{-| Create a definition.
-}
create : Focus -> Path File -> Definition
create focus relPath =
    let
        name =
            relPath
                |> Path.unwrap
                |> Array.last
                |> Maybe.withDefault ""
    in
    { baseName = baseName name
    , content = Nothing
    , directoryPath = directoryPath relPath
    , extensionName = extensionName name
    , focus = focus
    , metadata = Dict.empty
    }


{-| Fork a definition.
-}
fork : Path File -> Definition -> Definition
fork relPath def =
    let
        name =
            relPath
                |> Path.unwrap
                |> Array.last
                |> Maybe.withDefault ""
    in
    { baseName = baseName name
    , content = def.content
    , directoryPath = directoryPath relPath
    , extensionName = extensionName name
    , focus = def.focus
    , metadata = def.metadata
    }



-- ㊙️


baseName : String -> String
baseName name =
    name
        |> String.split "."
        |> Array.dropLast 1
        |> String.join "."


directoryPath : Path File -> Path Directory
directoryPath relPath =
    relPath
        |> Path.unwrap
        |> Array.dropLast 1
        |> Path.directory


extensionName : String -> Maybe String
extensionName name =
    Array.last (String.split "." name)
