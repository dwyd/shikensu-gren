module Shikensu.Contrib exposing ( clearMetadata, clone, copyPropsToMetadata, exclude, insertMetadata, permalink, rename, renameExtension, renderContent, replaceMetadata, setContent, transformContent, withBaseName, withDirectory, withExtension, withMetadata )

{-|

Premade functions to manipulate your bundles/definitions with.


# Contrib

@docs clearMetadata, clone, copyPropsToMetadata, exclude, insertMetadata, permalink, rename, renameExtension, renderContent, replaceMetadata, setContent, transformContent, withBaseName, withDirectory, withExtension, withMetadata

-}

import Bytes exposing ( Bytes )
import Dict exposing ( Dict )
import Json.Encode as Json
import Shikensu.Bundle as Bundle exposing ( Bundle )
import Shikensu.Contrib.Definition as Contrib.Definition
import Shikensu.Definition as Definition exposing ( Definition )
import Shikensu.Path as Path exposing ( Path, Kind(..), Directory, File )


{-| Clear metadata.
-}
clearMetadata : Bundle -> Bundle
clearMetadata =
    Bundle.mapCompendium (Array.map Contrib.Definition.clearMetadata)


{-| Clone.

For each definition that has the given `relativePath` (1st argument),
make a clone with a new `relativePath` (2nd argument),
and add that into the compendium just after the matching definition.

    >>> clone "index.html" "200.html" bundle

-}
clone : Path File -> Path File -> Bundle -> Bundle
clone existingPath newPath =
    []
        |> Array.foldr
                (\def acc ->
                    if Definition.relativePath def == existingPath then
                        Array.postfix
                            [ def
                            , Definition.fork newPath def
                            ]
                            acc
                    else
                        Array.pushLast def acc
                )
        |> Bundle.mapCompendium


{-| Copy definition properties into the metadata.
-}
copyPropsToMetadata : Bundle -> Bundle
copyPropsToMetadata =
    Bundle.mapCompendium (Array.map Contrib.Definition.copyPropsToMetadata)


{-| Exclude.

Filter out the definitions that have the given `relativePath`.

-}
exclude : Path File -> Bundle -> Bundle
exclude path =
    (\def -> Definition.relativePath def /= path)
        |> Array.filter
        |> Bundle.mapCompendium


{-| Insert additional metadata.
-}
insertMetadata : Dict String Json.Value -> Bundle -> Bundle
insertMetadata additionalMetadata =
    additionalMetadata
        |> Contrib.Definition.insertMetadata
        |> Array.map
        |> Bundle.mapCompendium


{-| Permalink.

Append the baseName to the directoryPath
and change the baseName to the given string.
It will NOT change definitions that already have the new baseName.

    >>> permalink "index" compendium

-}
permalink : String -> Bundle -> Bundle
permalink newBasename =
    newBasename
        |> Contrib.Definition.permalink
        |> Array.map
        |> Bundle.mapCompendium


{-| Rename.

Change the `relativePath` of the definitions that match a given `relativePath`.
For example, if you have a definition with the relativePath path `a/b/example.html`:

    >>> rename
    ..>   (Path.file [ "a", "b", "example.html" ])
    ..>   (Path.file [ "example", "index.html" ])
    ..>   compendium

-}
rename : Path File -> Path File -> Bundle -> Bundle
rename oldPath newPath =
    newPath
        |> Contrib.Definition.rename oldPath
        |> Array.map
        |> Bundle.mapCompendium


{-| Rename extension.

Example:

    >>> renameExtension "markdown" "html" compendium
    ..> -- The definitions that had the extensionName "markdown"
    ..> -- now have the extensionName "html"

-}
renameExtension : String -> String -> Bundle -> Bundle
renameExtension old new =
    new
        |> Contrib.Definition.renameExtension old
        |> Array.map
        |> Bundle.mapCompendium


{-| Render content.

Replace the `content` property by providing a renderer.
A renderer is a function with the signature `Definition -> Maybe Bytes`.
You can use this to render templates, markdown, etc.

-}
renderContent : (Definition -> Maybe Bytes) -> Bundle -> Bundle
renderContent renderer =
    renderer
        |> Contrib.Definition.renderContent
        |> Array.map
        |> Bundle.mapCompendium


{-| Replace metadata.

Replace the current metadata dictionary with another one.

-}
replaceMetadata : Dict String Json.Value -> Bundle -> Bundle
replaceMetadata dict =
    (\def -> { def | metadata = dict })
        |> Array.map
        |> Bundle.mapCompendium


{-| Set content.

Set content directly.

-}
setContent : Bytes -> Bundle -> Bundle
setContent bytes =
    (\def -> { def | content = Just bytes })
        |> Array.map
        |> Bundle.mapCompendium


{-| Transform content.

Alias for `renderContent`.

-}
transformContent : (Definition -> Maybe Bytes) -> Bundle -> Bundle
transformContent =
    renderContent


{-| Only keep definitions with the given base name.
-}
withBaseName : String -> Bundle -> Bundle
withBaseName baseName =
    (\def -> def.baseName == baseName)
        |> Array.filter
        |> Bundle.mapCompendium


{-| Only keep definitions with the given directory path.
-}
withDirectory : Path Directory -> Bundle -> Bundle
withDirectory directoryPath =
    (\def -> def.directoryPath == directoryPath)
        |> Array.filter
        |> Bundle.mapCompendium


{-| Only keep definitions with the given extension.
-}
withExtension : String -> Bundle -> Bundle
withExtension extension =
    (\def -> def.extensionName == Just extension)
        |> Array.filter
        |> Bundle.mapCompendium


{-| Only keep definitions with the given metadata.
-}
withMetadata : String -> Json.Value -> Bundle -> Bundle
withMetadata key value =
    (\def -> Dict.get key def.metadata == Just value)
        |> Array.filter
        |> Bundle.mapCompendium
