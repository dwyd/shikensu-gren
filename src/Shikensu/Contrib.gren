module Shikensu.Contrib exposing ( clearMetadata, clone, copyPropsToMetadata, exclude, insertMetadata, permalink, rename, renameExtension, renderContent, replaceMetadata, setContent, transformContent, withExtension )

{-|

@docs clearMetadata, clone, copyPropsToMetadata, exclude, insertMetadata, permalink, rename, renameExtension, renderContent, replaceMetadata, setContent, transformContent, withExtension

-}

import Bytes exposing ( Bytes )
import Dict exposing ( Dict )
import Json.Encode as Json
import Shikensu.Contrib.Definition as Contrib.Definition
import Shikensu.Definition as Definition exposing ( Definition, Compendium )
import Shikensu.Path as Path exposing ( Path, Kind(..), Directory, File )


{-| Clear metadata.
-}
clearMetadata : Compendium -> Compendium
clearMetadata =
    Array.map Contrib.Definition.clearMetadata


{-| Clone.

For each definition that has the given `relativePath` (1st argument),
make a clone with a new `relativePath` (2nd argument),
and add that into the compendium just after the matching definition.

    >>> clone "index.html" "200.html" compendium

-}
clone : Path File -> Path File -> Compendium -> Compendium
clone existingPath newPath =
    Array.foldr
        (\def acc ->
            if Definition.relativePath def == existingPath then
                Array.postfix
                    [ def
                    , Definition.fork newPath def
                    ]
                    acc
            else
                Array.pushLast def acc
        )
        []


{-| Copy definition properties into the metadata.
-}
copyPropsToMetadata : Compendium -> Compendium
copyPropsToMetadata =
    Array.map Contrib.Definition.copyPropsToMetadata


{-| Exclude.

Filter out the definitions that have the given `relativePath`.

-}
exclude : Path File -> Compendium -> Compendium
exclude path =
    Array.filter (\def -> Definition.relativePath def /= path)


{-| Insert additional metadata.
-}
insertMetadata : Dict String Json.Value -> Compendium -> Compendium
insertMetadata additionalMetadata =
    Array.map (Contrib.Definition.insertMetadata additionalMetadata)


{-| Permalink.

Append the baseName to the directoryPath
and change the baseName to the given string.
It will NOT change definitions that already have the new baseName.

    >>> permalink "index" compendium

-}
permalink : String -> Compendium -> Compendium
permalink newBasename =
    Array.map (Contrib.Definition.permalink newBasename)


{-| Rename.

Change the `relativePath` of the definitions that match a given `relativePath`.
For example, if you have a definition with the relativePath path `a/b/example.html`:

    >>> rename
    ..>   (Path.file [ "a", "b", "example.html" ])
    ..>   (Path.file [ "example", "index.html" ])
    ..>   compendium

-}
rename : Path File -> Path File -> Compendium -> Compendium
rename oldPath newPath =
    Array.map (Contrib.Definition.rename oldPath newPath)


{-| Rename extension.

Example:

    >>> renameExtension "markdown" "html" compendium
    ..> -- The definitions that had the extensionName "markdown"
    ..> -- now have the extensionName "html"

-}
renameExtension : String -> String -> Compendium -> Compendium
renameExtension old new =
    Array.map (Contrib.Definition.renameExtension old new)


{-| Render content.

Replace the `content` property by providing a renderer.
A renderer is a function with the signature `Definition -> Maybe Bytes`.
You can use this to render templates, markdown, etc.

-}
renderContent : (Definition -> Maybe Bytes) -> Compendium -> Compendium
renderContent renderer =
    Array.map (Contrib.Definition.renderContent renderer)


{-| Replace metadata.

Replace the current metadata dictionary with another one.

-}
replaceMetadata : Dict String Json.Value -> Compendium -> Compendium
replaceMetadata dict =
    Array.map (\def -> { def | metadata = dict })


{-| Set content.

Set content directly.

-}
setContent : Bytes -> Compendium -> Compendium
setContent bytes =
    Array.map (\def -> { def | content = Just bytes })


{-| Transform content.

Alias for `renderContent`.

-}
transformContent : (Definition -> Maybe Bytes) -> Compendium -> Compendium
transformContent =
    renderContent


{-| Only keep definitions with the given base name.
-}
withBaseName : String -> Compendium -> Compendium
withBaseName baseName =
    Array.filter (\def -> def.baseName == Just baseName)


{-| Only keep definitions with the given extension.
-}
withExtension : String -> Compendium -> Compendium
withExtension extension =
    Array.filter (\def -> def.extensionName == Just extension)
