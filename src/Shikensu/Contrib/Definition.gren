module Shikensu.Contrib.Definition exposing ( clearMetadata, copyPropsToMetadata, enclose, insertMetadata, permalink, rename, renameExtension, renderContent )

{-| See `Shikensu.Contrib` module for documentation.
-}

import Bytes exposing ( Bytes )
import Dict exposing ( Dict )
import Json.Encode as Json
import Shikensu.Definition as Definition exposing ( Definition )
import Shikensu.Path as Path exposing ( Path, Kind(..), Directory, File )


{-|-}
clearMetadata : Definition -> Definition
clearMetadata def =
    { def | metadata = Dict.empty }


{-|-}
copyPropsToMetadata : Definition -> Definition
copyPropsToMetadata def =
    def.metadata
        |> Dict.union
                (Dict.fromArray
                    [ { key = "baseName"
                      , value = Json.string def.baseName
                      }
                    , { key = "directoryPath"
                      , value =
                            Json.string
                                (Path.toPosix
                                    { absolute = False
                                    }
                                    def.directoryPath
                                )
                      }
                    , { key = "extensionName"
                      , value = Maybe.withDefault Json.null (Maybe.map Json.string def.extensionName)
                      }
                    , { key = "relativePath"
                      , value =
                            Json.string
                                (Path.toPosix
                                    { absolute = False
                                    }
                                    (Definition.relativePath def)
                                )
                      }
                    ]
                )
        |> (\dict -> { def | metadata = dict })


{-|-}
enclose : String -> Definition -> Definition
enclose dir def =
    { def | directoryPath = Path.map (Array.pushLast dir) def.directoryPath }


{-|-}
insertMetadata : Dict String Json.Value -> Definition -> Definition
insertMetadata additionalMetadata def =
    def.metadata
        |> Dict.union additionalMetadata
        |> (\dict -> { def | metadata = dict })


{-|-}
permalink : String -> Definition -> Definition
permalink newBaseName def =
    if def.baseName /= newBaseName then
        let
            newDirectoryPath =
                Path.map (Array.pushLast def.baseName) def.directoryPath
        in
        { def
            | baseName = newBaseName
            , directoryPath = newDirectoryPath
        }
    else
        def


{-|-}
rename : Path File -> Path File -> Definition -> Definition
rename oldPath newPath def =
    if Definition.relativePath def == oldPath then
        Definition.fork newPath def
    else
        def


{-|-}
renameExtension : String -> String -> Definition -> Definition
renameExtension oldExtname newExtname def =
    if def.extensionName == Just oldExtname then
        { def | extensionName = Just newExtname }
    else
        def


{-|-}
renderContent : (Definition -> Maybe Bytes) -> Definition -> Definition
renderContent renderer def =
    { def | content = renderer def }
