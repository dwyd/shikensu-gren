module Shikensu.Contrib.Definition exposing ( clearMetadata, enclose, insertMetadata, permalink, rename, renameExtension, renderContent )

{-| See `Shikensu.Contrib` module for documentation.
-}

import Bytes exposing ( Bytes )
import Dict exposing ( Dict )
import FileSystem.Path as Path exposing ( Path )
import Json.Encode as Json
import Shikensu.Definition as Definition exposing ( Definition )


{-|-}
clearMetadata : Definition -> Definition
clearMetadata def =
    { def | metadata = Dict.empty }


{-|-}
enclose : String -> Definition -> Definition
enclose dir def =
    { def | path = { def.path | directory = Array.pushLast dir def.path.directory } }


{-|-}
insertMetadata : Dict String Json.Value -> Definition -> Definition
insertMetadata additionalMetadata def =
    def.metadata
        |> Dict.union additionalMetadata
        |> (\dict -> { def | metadata = dict })


{-|-}
permalink : String -> Definition -> Definition
permalink newBaseName def =
    if def.path.filename /= newBaseName then
        def.path.extension
            |> (\ext ->
                    case ext of
                        "" ->
                            ""

                        _ ->
                            "." ++ ext
                )
            |> (++) newBaseName
            |> Path.fromPosixString
            |> Path.prepend { def.path | extension = "" }
            |> (\path -> { def | path = path })
    else
        def


{-|-}
rename : Path -> Path -> Definition -> Definition
rename oldPath newPath def =
    if def.path == oldPath then
        Definition.fork newPath def
    else
        def


{-|-}
renameExtension : String -> String -> Definition -> Definition
renameExtension oldExtname newExtname def =
    if def.path.extension == oldExtname then
        { def | path = { def.path | extension = newExtname } }
    else
        def


{-|-}
renderContent : (Definition -> Maybe Bytes) -> Definition -> Definition
renderContent renderer def =
    { def | content = renderer def }
